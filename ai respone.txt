

# แผนงาน n8n เฉพาะส่วน Backend (จัดลำดับสำคัญ)

ด้านล่างคือรายการงาน n8n แบ่ง 3 ระดับ พร้อม task ย่อยและผลลัพธ์ที่คาดหวัง โดยยึดสถาปัตยกรรม slipless: unique cents + TTL 10 นาที, HMAC, และ matching จาก Tasker/IMAP

## ระดับสำคัญ (Critical)
- __Session Store (Postgres)__
  - ออกแบบสคีมา `payment_sessions` (session_token PK, order_id, amount_base, amount_variant, currency, expires_epoch, used, created_at, updated_at, source/ip)
  - สร้าง migrations + index (session_token unique, expires_epoch, used, amount_variant)
  - ฟังก์ชัน upsert + mark used + GC sessions หมดอายุ

- __Shared HMAC Util (pure JS)__
  - Node ฟังก์ชัน: trim secret, Base64 decode → bytes, guard payload size, `sig = HMAC_SHA256(secret, timestamp + "\n" + sha256(rawBody))`
  - ใช้ร่วมทุก webhook (QR, Tasker, IMAP, Status, Callback)

- __QR Generate Workflow (hardening)__
  - Webhook: Verify HMAC, validate body (order_id, amount, currency)
  - คำนวณ unique cents ป้องกัน collision (เช็คซ้ำในช่วง TTL)
  - สร้าง/อัปเดต session: amount_variant, expires_epoch, used=false
  - สร้าง EMV PromptPay, คืน `{ emv, amount_to_pay, amount_variant, currency, expires_epoch, session_token }`
  - Structured log + X-Correlation-ID

- __Tasker Ingest v6 (webhook)__
  - Verify HMAC, schema validate (app/title/text/time/nid)
  - Mapper THB: regex + AI fallback, normalize amount + timestamp (Asia/Bangkok)
  - Dedupe: nid/message-id/content-hash + window
  - ส่งต่อ Matching Engine

- __Matching Engine__
  - Query sessions ที่ยังไม่หมดอายุ where amount_variant ตรง
  - mark `used=true`, emit “match-confirmed” event
  - เก็บ audit log (source, parser, confidence, matched_session_token)

- __Order Status Workflow__
  - Webhook: validate params + HMAC (หากต้อง), read session by token/order_id
  - คืนผล `{ status: pending|paid|expired, ... }`
  - เคส expired: now > expires_epoch
  - เคส paid: session.used=true

- __Security Baseline__
  - บังคับ HTTPS, SSL verify
  - Payload size guard ทุก webhook
  - Rate limit ขั้นต้นต่อ IP/token
  - PII masking ใน logs

## ระดับกลาง (Medium)
- __IMAP Gmail Ingest__
  - OAuth2 cred, polling label, fetch unseen
  - Parser KBank template + AI fallback
  - Dedupe จาก Message-ID/subject hash/time window
  - ส่งเข้า Matching Engine

- __Observability__
  - Structured logs ทุก workflow (correlation_id, session_token ตัดทอน)
  - Metrics: counts/success/failure/latency, queue size
  - Dashboard พื้นฐานใน n8n/外 tool

- __Dead-letter & Replay__
  - เก็บ event ที่ fail (webhook/imap/parser/match) ลง DLQ table
  - หน้า/flow สำหรับ replay แบบ manual + retention policy

- __Rate Limiting/Abuse Guard เพิ่มเติม__
  - Per-IP + per-token + burst control
  - Circuit breaker เมื่อ error rate สูง

- __Secret Rotation Procedure__
  - รองรับ PROMPTPAY_SECRET_v2
  - Dual-verify window (ยอมรับได้ทั้ง v1/v2)
  - คู่มือ rotate + rollout plan

## ระดับเสริม (Optional)
- __WP Callback (n8n → WP)__
  - Workflow POST `/san8n/v1/order/paid` (HMAC, retries/backoff, idempotency key)
  - ใช้เสริมจากการ polling

- __Payment Simulator__
  - สร้าง fake Tasker/IMAP events
  - Auto-create session + end-to-end test harness

- __Multi-bank Parser__
  - เพิ่ม SCB, BBL, KTB, TTB templates + unit test ต่อ parser

- __Alerting & Monitoring__
  - แจ้งเตือน Telegram/Email เมื่อ DLQ โต, error rate สูง, ใกล้หมดอายุ secret rotation window

# ลำดับทำงานแนะนำ
1) Critical: HMAC util → Session Store → QR Generate → Tasker Ingest → Matching → Order Status → Security baseline  
2) Medium: IMAP Gmail → Observability → DLQ/Replay → Rate limiting ขั้นสูง → Secret rotation  
3) Optional: WP Callback → Simulator → Multi-bank → Alerting

ถ้าต้องการ ผมจะเริ่มจาก Critical ชุดแรกให้เลย พร้อมโครง workflow ใน n8n (ชื่อ node/field/เอาต์พุต) และสคีมา Postgres ที่ใช้จริง. 

สรุปสถานะ: ผมได้เพิ่มรายการงาน n8n เข้าสู่ TODO กลางของโปรเจกต์เรียบร้อย โดยจัด priority สำคัญ/กลาง/เสริม พร้อม task ย่อยครบสำหรับเริ่มพัฒนาได้ทันที.